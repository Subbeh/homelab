---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:
  bootstrap:
    desc: Bootstrap the Kubernetes cluster
    cmds:
      - task: generate-dependencies
      - task: store-vault-secrets
      - task: create-namespaces
      - task: create-k8s-secrets
      - task: helmfile
      - task: post-bootstrap

  generate-dependencies:
    desc: Generate cluster dependencies
    cmds:
      - task: generate-deploy-key
      - task: add-github-deploy-key
      - task: generate-github-webhook-token

  store-vault-secrets:
    desc: Create Vault secrets
    cmds:
      - task: store-vault-github-deploy-key
      - task: store-vault-github-webhook-token
      - task: store-vault-github-status-token
      - task: store-vault-cf-api-token
    preconditions:
      - vault status &>/dev/null

  create-namespaces:
    desc: Create namespaces
    cmds:
      - kubectl create namespace "cert-manager" --dry-run=client --output=yaml | kubectl apply --server-side --filename -
      - kubectl create namespace "external-secrets" --dry-run=client --output=yaml | kubectl apply --server-side --filename -
      - kubectl create namespace "flux-system" --dry-run=client --output=yaml | kubectl apply --server-side --filename -
      - kubectl create namespace "tailscale" --dry-run=client --output=yaml | kubectl apply --server-side --filename -

  create-k8s-secrets:
    desc: Create Kubernetes secrets
    cmds:
      - task: create-secret-vault-token
      - task: create-secret-vault-ca
      - task: create-secret-github-deploy-key
      - task: create-secret-tailscale

  post-bootstrap:
    desc: Post-bootstrap tasks to run after cluster is running
    cmds:
      - task: add-gh-webhook

  generate-deploy-key:
    desc: Generate Github deploy key
    cmd: ssh-keygen -t ecdsa -b 521 -C "deploy-key" -f {{.SECRET_DIR}}/github-deploy.key -q -P ""
    status:
      - test -f {{.SECRET_DIR}}/github-deploy.key

  add-github-deploy-key:
    desc: Add or update deploy key in GitHub repository
    cmd: |
      if gh repo deploy-key list | grep -q "Flux Deploy Key"; then
        echo "Deploy key already exists, updating..."
        KEY_ID=$(gh repo deploy-key list --json id,title | jq -r '.[] | select(.title == "Flux Deploy Key") | .id')
        gh repo deploy-key delete $KEY_ID
      fi
      gh repo deploy-key add {{.SECRET_DIR}}/github-deploy.key.pub --title "Flux Deploy Key" --allow-write
    preconditions:
      - test -f {{.SECRET_DIR}}/github-deploy.key.pub
      - which gh jq

  generate-github-webhook-token:
    desc: Generate Github webhook token
    cmd: python -c "import secrets; print(secrets.token_hex(16), end='')" > {{.SECRET_DIR}}/github-webhook-token.txt
    status:
      - test -f {{.SECRET_DIR}}/github-webhook-token.txt

  store-vault-github-deploy-key:
    desc: Store Github deploy key in Vault
    cmd: vault kv put secret/k8s/github-deploy identity=@{{.SECRET_DIR}}/github-deploy.key known_hosts="$(ssh-keyscan github.com)"
    preconditions:
      - test -f {{.SECRET_DIR}}/github-deploy.key

  store-vault-github-webhook-token:
    desc: Store Github webhook token in Vault
    cmd: vault kv put secret/k8s/github-webhook-token token=@{{.SECRET_DIR}}/github-webhook-token.txt
    preconditions:
      - test -f {{.SECRET_DIR}}/github-webhook-token.txt

  store-vault-github-status-token:
    desc: Store Github status token in Vault
    cmd: vault kv put secret/k8s/github-status-token token=@{{.SECRET_DIR}}/github-status-token.txt
    preconditions:
      - test -f {{.SECRET_DIR}}/github-status-token.txt

  store-vault-cf-api-token:
    desc: Store Cloudflare API token in Vault
    cmd: vault kv put secret/k8s/cloudflare-api-token api-token="$CF_SBBH_CLOUD_API_TOKEN"
    preconditions:
      - test -n "$CF_SBBH_CLOUD_API_TOKEN"

  create-secret-vault-token:  # TODO: create vault token somewhere
    desc: Create vault-token secret for External Secrets Operator
    cmd: kubectl -n kube-system create secret generic vault-token --from-literal=token="$(cat {{.SECRET_DIR}}/vault-external-secrets-token.txt | tr -d '\n')" --dry-run=client -o yaml | kubectl apply -f -
    preconditions:
      - test -f {{.SECRET_DIR}}/vault-external-secrets-token.txt

  create-secret-vault-ca:
    desc: Create Vault CA secret
    cmd: kubectl -n flux-system create secret generic vault-ca-cert --from-file=ca.crt={{.SECRET_DIR}}/vault.crt --dry-run=client -o yaml | kubectl apply -f -
    preconditions:
      - test -f {{.SECRET_DIR}}/vault.crt

  create-secret-github-deploy-key:
    desc: Apply External Secrets configuration for Flux
    cmd: kubectl apply -f k8s/apps/external-secrets/external-secrets/app/clustersecretstore.yaml -f k8s/flux/cluster/github-deploy-key.yaml
    dir: "{{.ROOT_DIR}}"
    preconditions:
      - test -f "{{.ROOT_DIR}}/k8s/apps/external-secrets/external-secrets/app/clustersecretstore.yaml"

  create-secret-tailscale:
    desc: Create oauth tailscale secret
    cmd: |
      CLIENT_ID=$(vault kv get -format=json -field=data secret/k8s/tailscale | jq -r '.client_id')
      CLIENT_SECRET=$(vault kv get -format=json -field=data secret/k8s/tailscale | jq -r '.client_secret')
      kubectl -n tailscale create secret generic operator-oauth \
        --from-literal=client_id="$CLIENT_ID" \
        --from-literal=client_secret="$CLIENT_SECRET" \
        --dry-run=client -o yaml | kubectl apply -f -

  helmfile:
    desc: Apply helmfile
    cmd: helmfile --file helmfile.yaml sync --hide-notes
    preconditions:
      - test -f helmfile.yaml

  add-gh-webhook:
    desc: Add Flux receiver webhook to GitHub repository
    cmd: |
      echo "Waiting for GitHub webhook receiver and webhook path to be ready..."
      while true; do
        FLUX_WEBHOOK=$(kubectl -n flux-system get receiver github-webhook -o jsonpath='{.status.webhookPath}' 2>/dev/null)
        if [[ -n "$FLUX_WEBHOOK" ]]; then
          break
        fi
        echo "GitHub webhook receiver not ready, waiting 10 seconds..."
        sleep 10
      done
      echo "Webhook path: $FLUX_WEBHOOK"
      echo "Token: {{.WEBHOOK_TOKEN}}"
      gh api \
        -X POST \
        -H "Accept: application/vnd.github+json" \
        /repos/Subbeh/homelab/hooks \
        --input - <<EOF
      {
        "name": "web",
        "active": true,
        "events": ["push"],
        "config": {
          "url": "http://flux-webhook.sbbh.cloud$FLUX_WEBHOOK",
          "content_type": "json",
          "secret": "{{.WEBHOOK_TOKEN}}"
        }
      }
      EOF
    vars:
      WEBHOOK_TOKEN:
        sh: cat {{.SECRET_DIR}}/github-webhook-token.txt
    preconditions:
      - test -f {{.SECRET_DIR}}/github-webhook-token.txt
