---
- name: Enable Kea DHCP per interface
  ansibleguy.opnsense.dhcp_general:
    enabled: true
    interfaces: "{{ vlans | map(attribute='name') | map('extract', interface_mapping) | join(',') }}"

- name: Add DHCP subnets
  ansibleguy.opnsense.dhcp_subnet:
    description: "{{ item.desc }}"
    subnet: "{{ item.subnet }}"
    auto_options: false
    pools: ["{{ item.subnet | ansible.utils.nthhost(200) }}-{{ item.subnet | ansible.utils.nthhost(254) }}"]
    gateway: "{{ item.subnet | ansible.utils.nthhost(1) }}"
    dns: ["{{ item.subnet | ansible.utils.nthhost(1) }}"]
    domain: "{{ net_domain_loc }}"
    domain_search: ["{{ net_domain_loc }}"]
    next_server: "{{ hostvars['services'].ip_addr | ansible.utils.ipaddr('address') }}"
    tftp_server: "{{ hostvars['services'].ip_addr | ansible.utils.ipaddr('address') }}"
    tftp_file: netboot.xyz.efi
  loop: "{{ vlans }}"

- name: Pulling existing reservations
  ansibleguy.opnsense.list:
    target: dhcp_reservation
  register: existing_entries

- name: Show existing reservations
  ansible.builtin.debug:
    var: existing_entries.data

- name: Remove existing reservations
  ansibleguy.opnsense.dhcp_reservation:
    ip: "{{ item.ip }}"
    state: absent
  loop: "{{ existing_entries.data }}"

- name: Add DHCP reservations
  ansibleguy.opnsense.dhcp_reservation:
    ip: "{{ hostvars[item].ip_addr | ansible.utils.ipaddr('address') }}"
    subnet: "{{ hostvars[item].ip_addr | ansible.utils.ipaddr('network') ~ '/' ~ hostvars[item].ip_addr.split('/')[1] }}"
    mac: "{{ hostvars[item].mac_addr }}"
    hostname: "{{ item }}"
    description: "{{ hostvars[item].desc | default(omit) }}"
  when:
    - hostvars[item].ip_addr is defined
    - hostvars[item].mac_addr is defined
  loop: "{{ groups['all'] }}"
